module src/opponent

import src/lib
import src/generate

def winScore(): Int = 1000
def loseScore(): Int = -1000


/*
 * Advanced Computer Play Logic with difficulty levels
 * Input: gameBoard: GameBoard, smallBoardNumber: Int, computer: Cell, difficulty: Int
 * Output: Int
 */
def advancedComputerPlay(gameBoard: GameBoard, smallBoardNumber: Int, computer: Cell, difficulty: Int): Int = {
  with on[OutOfBounds].panic
  val currentBoard: List[Cell] = gameBoard.bigBoard.get(smallBoardNumber)

  // Use existing strategy for easy mode (difficulty = 0)
  if (difficulty == 0) {
    computerPlay(currentBoard, computer)
  } else {
    var bestMove = -1
    var bestScore = loseScore()
    val maxDepth = if (difficulty == 1) 3 else 5 // Medium uses depth 3, Hard uses depth 5

    // try each possible move
    each(0, 9) { move =>
      if (checkAvailableCell(currentBoard, move)) {
        var simulatedGame = gameBoard
        simulatedGame = checkNewCell(simulatedGame, smallBoardNumber, move, computer)
        val score = minimax(simulatedGame, move, maxDepth, false, computer)

        if (score > bestScore) {
          bestScore = score
          bestMove = move
        }
      }
    }
    // Fallback to basic strategy if no good move found
    if (bestMove == -1) {
      computerPlay(currentBoard, computer)
    } else {
      bestMove
    }
  }
}


/*
 * Minimax algorithm implementation
 * Input: gameBoard: GameBoard, nextBoard: Int, depth: Int, isMaximizing: Bool, computer: Cell
 * Output: Int (score)
 */
def minimax(gameBoard: GameBoard, nextBoard: Int, depth: Int, isMaximizing: Bool, computer: Cell): Int = {
  with on[OutOfBounds].panic

  val opponent = if (computer is Cross()) Nought() else Cross()
  val currentPlayer = if (isMaximizing) computer else opponent
  var retValue: Int = -1

  // Check terminal states
  val gameState = checkWinSituation(gameBoard.smallCopy, currentPlayer)

  if (gameState.isFinished) {
    retValue = evaluateGameState(gameState, computer)
  }


  if (depth == 0 && retValue == -1) {
    retValue = evaluatePosition(gameBoard, computer)
  }
  val currentBigBoard: BigBoard = gameBoard.bigBoard
  val currentBoard = currentBigBoard.get(nextBoard)

  if (retValue == -1) {
    if (isMaximizing) {
      var maxScore = loseScore()
      each(0, 9) { move =>
        if (checkAvailableCell(currentBoard, move)) {
          var newGame = gameBoard
          newGame = checkNewCell(newGame, nextBoard, move, computer)
          val score = minimax(newGame, move, depth - 1, false, computer)
          maxScore = if (score > maxScore) score else maxScore
        }
      }
      retValue = maxScore
    } else {
      var minScore = winScore()
      each(0, 9) { move =>
        if (checkAvailableCell(currentBoard, move)) {
          var newGame = gameBoard
          newGame = checkNewCell(newGame, nextBoard, move, opponent)
          val score = minimax(newGame, move, depth - 1, true, computer)
          minScore = if (score < minScore) score else minScore
        }
      }
      retValue = minScore
    }
  }
  retValue
}


/*
 * Evaluates non-terminal positions
 */
def evaluatePosition(gameBoard: GameBoard, computer: Cell): Int = {
  with on[OutOfBounds].panic
  var score = 0
  // Score small boards
  each(0, 9) { sm =>
    val currentSmallBoard = gameBoard.bigBoard.get(sm)
    val boardState = checkWinSituation(currentSmallBoard, computer)
    score = score + evaluateGameState(boardState, computer) / 10
  }

  // Bonus for controlling center board
  if (gameBoard.smallCopy.get(4) is computer) {
    score = score + 50
  }
  score
}

/*
 * Evaluates final game states
 */
def evaluateGameState(state: Finish, computer: Cell): Int = {
  if (state.isFinished) {
    state.state match {
      case Win() => 
        if (state.player is computer) winScore()
        else loseScore()
      case _ => 0
    }
  } else {
    0
  }
}


/*
 * Checks if it's a computer turn right now
 * Input : currentPlayer: Cell, computer: Cell
 * Output : Bool
 */
def isComputerTurn(currentPlayer: Cell, computer: Cell): Bool =
  (currentPlayer, computer) match {
    case (Cross(), Cross()) => true
    case (Nought(), Nought()) => true
    case _ => false
  }


/// ################
/// SIMPLE ALGORITHM
/// ################

/*
 * Computer Play Logic
 * Strategy
 * 1. Find winning move
 * 2. Block opponent's winning move
 * 3. Take center [4]
 * 4. Take corner [0,2,6,8]
 * 5. Take side [1,3,5,7]
 *
 * Input : smallBoard: SmallBoard, computer: Cell
 * Output : Int
 */
def computerPlay(smallBoard: SmallBoard, computer: Cell): Int = {
  val opponent: Cell = if (computer is Cross()) Nought() else Cross()
  
  smallBoard.findWinningMove(computer)
            .orElse{ smallBoard.findWinningMove(opponent) }
            .orElse{ [4,0,2,6,8].findFirstAvailable(smallBoard) }
            .orElse{ [1,3,5,7].findFirstAvailable(smallBoard) }
            .getOrElse {42}
}


/**
 * Finds first available move in a board using a given positions list
 * Input : positions: List[Int], board: SmallBoard
 * Output : Option[Int]
 */
def findFirstAvailable(positions: List[Int], board: SmallBoard): Option[Int] = {
  positions.find { pos => checkAvailableCell(board, pos) }
}


/**
 * Finds winning move in a board if exists
 * Input : board: SmallBoard, player: Cell
 * Output : Option[Int]
 */
def findWinningMove(board: SmallBoard, player: Cell): Option[Int] = {
  build(9){ i => i }.find { pos =>
    if (checkAvailableCell(board, pos)){
      val simulateBoard = board.replace(pos, player)
      val sit: Finish = checkWinSituation(simulateBoard, player)
      sit.state match {
        case Win() => true
        case _ => false
      }
    }else false
  }
}
