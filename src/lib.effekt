module src/lib

import io/console

import tty
import char
effect WrongInput(msg: String): Unit
effect ExitGame(): Nothing
effect PrintHelp(helpType: Help): Unit


type GameMode {
  Local()
  Computer()
}


type Cell {
  Nought()
  Cross()
  Draw()
  Active()
  Empty()
}


type FinishState {
  Win()
  Lose()
}

type Help {
  GameRules()
  Board()
}


type SmallBoard = List[Cell]
type BigBoard = List[SmallBoard]


record GameBoard(bigBoard: BigBoard, smallCopy: SmallBoard)
record Finish(isFinished: Bool, state: FinishState, player: Cell)


val winCombinations: List[List[Int]] = [[0,1,2], [3,4,5], [6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]]


/*
 * Returns String rappresentation of the Player
 * Input : player: Cell
 * Output : String
 */
def playerString(player: Cell): String = {
  if (player is Cross()) "X"
  else "O"
}


/*
 * Reads the char from the Terminal
 * Input : None
 * Output : Char
 */
def consoleInput(): Char = {
  with on[OutOfBounds].panic
  with console

  val input = do readLine()
  if (input.length() == 1) {
    charAt(input, 0)
  } else {
    ' '
  }
}

  /*
   * Ask the player to choose a square from 1-9 incl.
   */
  def chooseSquare(): Int / {WrongInput, ExitGame, PrintHelp} =
    consoleInput() match {
      case 'q' => do ExitGame()
      case 'h' => do PrintHelp(Board()); chooseSquare()
      case '0' =>
        do WrongInput("Invalid input. Please type a number from 1 to 9.")
        chooseSquare()
      case c =>
        with on[WrongFormat].default {
          do WrongInput("Invalid input. Please type a number from 1 to 9.")
          chooseSquare()
        }

        c.digitValue - 1
    }

/*
 * Prints new line to the console
 * Input : None
 * Output : Int
 */
def newLine(): Unit = println("\n")


/// Find the first element that satisfies the given predicate
/// Returns None() if no element is found
///
/// Examples:
/// ```
/// > [1, 2, 3, 4, 5].find { x => x > 3 }
/// Some(4)
///
/// > [1, 2, 3].find { x => x > 10 }
/// None()
/// ```
///
/// O(N)
def find[A](list: List[A]) { predicate: A => Bool }: Option[A] = {
  list match {
    case Nil() => None()
    case Cons(head, tail) =>
      if (predicate(head)) Some(head)
      else tail.find { predicate }
  }
}